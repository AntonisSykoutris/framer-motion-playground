/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/models/laptop.glb -t 
*/

import * as THREE from 'three';
import React, { useRef, useState } from 'react';
import { useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { motion } from 'framer-motion-3d';
import { useAnimation } from 'framer-motion';

type GLTFResult = GLTF & {
  nodes: {
    Screen: THREE.Mesh;
    Black_Inset: THREE.Mesh;
    Rubber: THREE.Mesh;
    Screen_Back: THREE.Mesh;
    Keyboard: THREE.Mesh;
    Touch_Panel: THREE.Mesh;
    Ports: THREE.Mesh;
    Touchpad: THREE.Mesh;
    Body: THREE.Mesh;
  };
  materials: {
    Namibia: THREE.MeshStandardMaterial;
    ['Display Rim 1']: THREE.MeshStandardMaterial;
    ['Display Rubber 1']: THREE.MeshStandardMaterial;
    ['Body 2']: THREE.MeshStandardMaterial;
    ['Keyboard 2']: THREE.MeshStandardMaterial;
    ['Touch Bar 1']: THREE.MeshStandardMaterial;
    ['Ports 1']: THREE.MeshStandardMaterial;
    ['Touchpad 1']: THREE.MeshStandardMaterial;
    ['Body 3']: THREE.MeshStandardMaterial;
  };
  // animations: GLTFAction[]
};

type ContextType = Record<string, React.ForwardRefExoticComponent<JSX.IntrinsicElements['mesh']>>;

export function Laptop(props: JSX.IntrinsicElements['group']) {
  const { nodes, materials } = useGLTF('./models/laptop.glb') as GLTFResult;
  const variants = {
    open: {
      rotateX: (0 * Math.PI) / 180,
      x: -0.03,
      y: 111.687,
      z: 2.841,
    },
    closed: {
      rotateX: (105 * Math.PI) / 180,
      x: 0,
      y: 75,
      z: 39,
      transition: {
        delay: 2,
        duration: 2,
      },
    },
  };
  // const control = useAnimation();
  const [isClicked, setIsClicked] = useState(false);
  return (
    <group {...props} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]} scale={0.027}>
        <motion.group
          position={[-0.03, 111.687, 2.841]}
          scale={3.371}
          variants={variants}
          initial={'closed'}
          animate={isClicked ? 'open' : 'closed'}
          transition={{ duration: 2, delay: 0 }}
          onClick={() => setIsClicked(!isClicked)}
        >
          <mesh
            geometry={nodes.Screen.geometry}
            material={materials.Namibia}
            position={[0.009, -33.128, -0.843]}
            scale={0.297}
          />
          <mesh
            geometry={nodes.Black_Inset.geometry}
            material={materials['Display Rim 1']}
            position={[0.009, -33.128, -0.843]}
            scale={0.297}
          />
          <mesh
            geometry={nodes.Rubber.geometry}
            material={materials['Display Rubber 1']}
            position={[0.009, -33.128, -0.843]}
            scale={0.297}
          />
          <mesh
            geometry={nodes.Screen_Back.geometry}
            material={materials['Body 2']}
            position={[0.009, -33.128, -0.843]}
            scale={0.297}
          />
        </motion.group>
        <mesh geometry={nodes.Keyboard.geometry} material={materials['Keyboard 2']} />
        <mesh geometry={nodes.Touch_Panel.geometry} material={materials['Touch Bar 1']} />
        <mesh geometry={nodes.Ports.geometry} material={materials['Ports 1']} />
        <mesh geometry={nodes.Touchpad.geometry} material={materials['Touchpad 1']} />
        <mesh geometry={nodes.Body.geometry} material={materials['Body 3']} />
      </group>
    </group>
  );
}

useGLTF.preload('./models/laptop.glb');
